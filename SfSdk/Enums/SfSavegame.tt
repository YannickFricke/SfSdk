<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ output extension=".cs" #>
// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Shakes & Fidget Version: 495
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace SfSdk.Enums
{
    internal enum SfSavegame
    {
<#
		GenerateFromOriginal();
#>
    }
}<#+

private void GenerateFromOriginal()
{
	string path = Host.ResolvePath(string.Empty);
	var lines = File.ReadAllLines(Path.Combine(path, "SfSavegameOriginal.txt"));
	InsertLines(lines);
}

private void InsertLines(IEnumerable<string> lines) 
{
	PushIndent("\t");
	PushIndent("\t");

	foreach (var line in lines)
	{
		if (string.IsNullOrEmpty(line) || line.StartsWith("#")) continue;

	    var originalName = line.Substring(line.IndexOf("SG_", StringComparison.Ordinal),
                                          line.Length - line.IndexOf("SG", StringComparison.Ordinal) -
                                          (line.Length - line.IndexOf("=", StringComparison.Ordinal)));
        originalName = originalName.Substring(3, originalName.Length - 3); // remove "SG_"
        originalName = originalName.Trim(' ');
        var parts = originalName.Split('_');
        for (var i = 0; i < parts.Length; i++)
        {
            parts[i] = parts[i].Substring(0, 1).ToUpper() +
                       parts[i].Substring(1, parts[i].Length - 1).ToLower();
        }
        var name = string.Join(string.Empty, parts);
		
        var value = line.Substring(line.IndexOf("= ", StringComparison.Ordinal) + 2,
                                   line.Length - line.IndexOf("= ", StringComparison.Ordinal) - 2 -
                                   (line.Length - line.IndexOf(';')));
        
		var formatString = "{0} = {1}";
		if (line != lines.Last()) formatString += ",";
		WriteLine(string.Format(formatString, name, value));
	}

	PopIndent();
	PopIndent();
}

#>